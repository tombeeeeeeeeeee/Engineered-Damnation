using System;
using System.Collections;
using System.Collections.Generic;
<<<<<<< HEAD
=======
using TMPro;
>>>>>>> main
using UnityEngine;
using UnityEngine.InputSystem;

public class SymbolRing : MonoBehaviour
{
    public Material[] symbols;

    [HideInInspector]
    public float anglePerSymbol = 360f;
    public int symbolIndex = 1;

<<<<<<< HEAD
=======
    public float duration = 0.2f;

    Quaternion targetRotation;
    Quaternion fromRotation;

    float elapsed;
    bool moving = false;

>>>>>>> main
    private void Start()
    {
        anglePerSymbol = 360 / symbols.Length;
    }

    public Material symbol { get { return symbols[symbolIndex - 1]; } }

    public void TurnDial(int direction)
    {
<<<<<<< HEAD
        direction = Math.Sign(direction); // argument should be either -1 or 1, but just to make sure

        transform.Rotate(Vector3.up, direction * anglePerSymbol);
        symbolIndex -= direction;
        //symbolIndex = (symbolIndex + direction % symbols.Length);


        if (symbolIndex > symbols.Length)
            symbolIndex = 1;
        else if (symbolIndex < 1)
            symbolIndex = symbols.Length;

        //Debug.Log("symbol index: " + symbolIndex + " of " + symbols.Length);
=======
        if (!moving)
        {
            direction = Math.Sign(direction); // argument should be either -1 or 1, but just to make sure

            Quaternion initialRotation = transform.rotation;
            transform.Rotate(Vector3.up, direction * anglePerSymbol);
            targetRotation = transform.rotation;
            transform.rotation = initialRotation;

            fromRotation = initialRotation;
            moving = true;
            elapsed = 0;



            symbolIndex -= direction;
            //symbolIndex = (symbolIndex + direction % symbols.Length);


            if (symbolIndex > symbols.Length)
                symbolIndex = 1;
            else if (symbolIndex < 1)
                symbolIndex = symbols.Length;

            //Debug.Log("symbol index: " + symbolIndex + " of " + symbols.Length);
        }
    }

    private void Update()
    {
        if (moving)
        {
            float interpolationRatio = elapsed / duration;

            Quaternion interpolatedRotation = Quaternion.Lerp(fromRotation, targetRotation, interpolationRatio);

            transform.rotation = interpolatedRotation;


            if (elapsed < duration)
                elapsed += Time.deltaTime;
            else moving = false;
        }
>>>>>>> main
    }
}
